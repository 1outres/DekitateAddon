buildscript {
    repositories {
        gradlePluginPortal()
        maven {
            name = "Fabric"
            url = "https://maven.fabricmc.net/"
        }
        flatDir {
            dirs 'libs'
        }
    }
    dependencies {
        classpath "net.fabricmc:fabric-loom:${loomVersion}"
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

apply plugin: "fabric-loom"
apply plugin: "com.github.johnrengelman.shadow"

configurations {
	shadow
	modImplementation.extendsFrom shadow
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "lukflug"
        url = "https://lukflug.github.io/maven/"
    }
}

loom {}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    shadow "net.jodah:typetools:0.6.3"

    shadow "com.lukflug:panelstudio:0.2.1"
    shadow "com.lukflug:panelstudio-mc19:0.2.3"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}



shadowJar {
    classifier = "dev"
    configurations = [project.configurations.shadow]
    relocate "com.lukflug.panelstudio","com.lukflug.panelstudio_0_2_3"
}

remapJar {
    dependsOn shadowJar
    inputFile = shadowJar.archiveFile
}


jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
